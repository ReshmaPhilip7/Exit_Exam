# -*- coding: utf-8 -*-
"""Exit_Exam.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sN46meuaaSXbw7rA3iX9IiCsoiYBDsk4
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('train.csv')

df.head()

df.columns

df.info()

df.shape

df.describe()

"""Product_Category_2  and Product_Category_23 have missing values"""

df['Product_Category_2'].fillna(method='ffill', inplace=True)

df['Product_Category_3'].fillna(method='ffill', inplace=True)

df.info()

df.isna().sum()

df['Product_Category_3'].fillna(method='bfill', inplace=True)

df.isna().sum()

df['Product_Category_2'].fillna(method='bfill', inplace=True)

df.isna().sum()

df.head()

numerical_df = df.select_dtypes(include=['number'])

numerical_df.columns.tolist()

categorical_df = df.select_dtypes(include=['object', 'category'])

categorical_df.columns.tolist()

categorical_df['Product_ID'].value_counts()

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
df['Product_ID_encoded'] = le.fit_transform(df['Product_ID'])
df.head()

categorical_df['Gender'].value_counts()

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
df['Gender_encoded'] = le.fit_transform(df['Gender'])
df.head()

categorical_df['Age'].value_counts()

le = LabelEncoder()
df['Age_encoded'] = le.fit_transform(df['Age'])
df.head()

categorical_df['City_Category'].value_counts()

le = LabelEncoder()
df['City_Category_encoded'] = le.fit_transform(df['City_Category'])
df.head()

categorical_df['Stay_In_Current_City_Years'].value_counts()

le = LabelEncoder()
df['Stay_In_Current_City_Years_encoded'] = le.fit_transform(df['Stay_In_Current_City_Years'])
df.head()

df1 = df.drop(['Product_ID', 'Gender', 'Age', 'City_Category', 'Stay_In_Current_City_Years'], axis=1)

df1['Product_ID'] = df1['Product_ID_encoded']
df1['Gender'] = df1['Gender_encoded']
df1['Age'] = df1['Age_encoded']
df1['City_Category'] = df1['City_Category_encoded']
df1['Stay_In_Current_City_Years'] = df1['Stay_In_Current_City_Years_encoded']

df1.head()

df1 = df1.drop(['Product_ID_encoded', 'Gender_encoded', 'Age_encoded', 'City_Category_encoded', 'Stay_In_Current_City_Years_encoded'], axis=1)

df1.info()

df1.corr()

plt.figure(figsize=(12, 8))
import seaborn as sns
sns.heatmap(df1.corr(), cmap="coolwarm", annot=True)

"""No 2 columns are highly positively or highly negatively correlated. So, no need to drop any columns."""

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
df1_stdscaled = scaler.fit_transform(df1)

df1_stdscaled = pd.DataFrame(df1_stdscaled)

df1_stdscaled.head()

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
df1_minmaxscaled = scaler.fit_transform(df1)
df1_minmaxscaled = pd.DataFrame(df1_minmaxscaled)
df1_minmaxscaled.head()

from sklearn.preprocessing import normalize

normalized_data = normalize(df1)

df1_normalized = pd.DataFrame(normalized_data)

df1_normalized.head()

"""We can choose raw data or standard scaled data or min-max scaled data or normalized data to do modelling."""

df2 = pd.read_csv('test_Vges7qu.csv')

df2.head()

df2.columns

df2.info()

df2.shape

df2.describe()

df2.isna().sum()

df2['Product_Category_2'].fillna(method='ffill', inplace=True)
df2['Product_Category_3'].fillna(method='ffill', inplace=True)

df2.isna().sum()

df2['Product_Category_3'].fillna(method='bfill', inplace=True)

df2.isna().sum()

numerical_df = df2.select_dtypes(include=['number'])
numerical_df.columns.tolist()

categorical_df = df2.select_dtypes(include=['object', 'category'])
categorical_df.columns.tolist()

categorical_df['Product_ID'].value_counts()

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
df2['Product_ID_encoded'] = le.fit_transform(df2['Product_ID'])
df2.head()

categorical_df['Gender'].value_counts()

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
df2['Gender_encoded'] = le.fit_transform(df2['Gender'])
df2.head()

categorical_df['Age'].value_counts()

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
df2['Age_encoded'] = le.fit_transform(df2['Age'])
df2.head()

categorical_df['City_Category'].value_counts()

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
df2['City_Category_encoded'] = le.fit_transform(df2['City_Category'])
df2.head()

categorical_df['Stay_In_Current_City_Years'].value_counts()

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
df2['Stay_In_Current_City_Years_encoded'] = le.fit_transform(df2['Stay_In_Current_City_Years'])
df2.head()

df2 = df2.drop(['Comb','Product_ID', 'Gender', 'Age', 'City_Category', 'Stay_In_Current_City_Years'], axis=1)

df2.head()

df2['Product_ID'] = df2['Product_ID_encoded']
df2['Gender'] = df2['Gender_encoded']
df2['Age'] = df2['Age_encoded']
df2['City_Category'] = df2['City_Category_encoded']
df2['Stay_In_Current_City_Years'] = df2['Stay_In_Current_City_Years_encoded']

df2.head()

df2 = df2.drop(['Product_ID_encoded', 'Gender_encoded', 'Age_encoded', 'City_Category_encoded', 'Stay_In_Current_City_Years_encoded'], axis=1)
df2.info()

df1.columns.tolist()

df2.columns.tolist()

"""I am choosing Linear Regression"""

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

df1.info()

x_train = df1.drop(['Purchase'], axis=1)
y_train = df1['Purchase']

x_test = df2

df2.info()

model = LinearRegression()
model.fit(x_train, y_train)

y_pred = model.predict(x_test)

y_pred

import pickle
with open('linear_model.pkl', 'wb') as f:
    pickle.dump(model, f)

submission_ids = df2[['User_ID', 'Product_ID']]

submission = pd.DataFrame({
    'Purchase': y_pred,
    'User_ID': submission_ids['User_ID'],
    'Product_ID': submission_ids['Product_ID']
})

submission['Purchase'] = submission['Purchase'].round().astype(int)

submission.to_csv('submission.csv', index=False)

